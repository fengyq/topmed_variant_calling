#!/usr/bin/perl -w

## per-individual plot should include
## Average-depth across all chip sites
## Individual accuracy

use strict;
#use Getopt::Long;
#use IO::Zlib;
use FindBin;
use lib $FindBin::Bin;
use wGetOptions qw(wpod2usage wGetOptions);
#use hyunlib qw(@chrs @szchrs @cumszchrsMb parsePheno getMosixCmd schr2nchr vcfSampleIDs vcfSampleIndex %ichrs readPedVcf $binR $binRscript $binrm $binmake $binzcat $bincat $binhead $binmv $bincut $bingrep $binpfbtops $bingnuplot $binepstopdf $binsort $defaultfasta);

my @ins = ();
my @vcfs = ();
my @titles = ();
my @filtkeys = ();
my @filtops = ();
my @filtvals = ();
my @fhs = ();
my $out = "";
my $main = "Allele Frequency Spectrum";
my $skipFlag = "";
my $ps = 1;
my $adjAC = 0;
my $theta = 0.001;
my $nofrac = "";
my $maxAC = 0;
my $affield = "";
my $binpfbtops = "pfbtops";
my $bingnuplot = "gnuplot";
my $binepstopdf = "$FindBin::Bin/bin/epstopdf";
#my $drawExpected = "";

wGetOptions(
    "-Draw allele frequency spectrum (gnuplot required)",
    "--Required Options",
    "in=s" => [\@ins, "Input VCF files with AC field. Use '[invcf],[title]' or '[invcf],[title],[filter]' to label/filter the group of variants"],
    "out=s" => [\$out, "Output VCF file"],
    "--Additional Options",
    "main=s" => [\$main, "Title of the the program"],
    "skip" => [\$skipFlag, "Skip scanning of input VCF file (when redrawing)"],
    "ps=f" => [\$ps, "point size (in gnuplot)"],
    "adjAC=i" => [\$adjAC, "Adjust the allele count based on missingness"],
    "nofrac" => [\$nofrac, "Report number of variants instead of fraction of variants"],
    "maxAC=i" => [\$maxAC, "Maximum allele count to display"],
    "AF-field=s" => [\$affield,"Use allele frequency field in INFO field instead of AC"],
    "binpfbtops=s" => [\$binpfbtops, "Path to the pfbtops software"],
    "bingnuplot=s" => [\$bingnuplot, "Path to the gnuplot software"],
    "binepstopdf=s" => [\$binepstopdf, "Path to the epstopdf software"],        
    ) || wpod2usage(2);

unless ( ( $#ins >= 0 ) && ( $out ) ) {
    print STDERR "ERROR: Missing required option\n";
    wpod2usage(2);
}

my %hACs = (); ## list total number of possible ACs
my @aACs = (); ## contains the reference of file-specific hashes
my @nSNPs = ();
my @nAlleles = ();

my @vtypes = ();
my @valleles = ();


unless ( $skipFlag ) {
    foreach my $in (@ins) {
	my @F = split(/,/,$in);
	die "Cannot parse $in\n" if ( $#F < 0 );
	push(@vcfs,$F[0]);
	if ( $#F > 0 ) {
	    push(@titles,$F[1]);
	}
	else {
	    my @G = split(/\//,$F[0]);
	    push(@titles,$G[$#G]);
	}
	
	if ( $#F > 2 ) {
	    split(//,$F[3])
	}
	
	if ( $#F > 1 ) {
	    if ( $F[2] eq "filter" ) {
		push(@filtkeys,"PASS");
		push(@filtops,"");
		push(@filtvals,"");
	    }
	    elsif ( $F[2] =~ /^(\S+)([><=])(\S+)$/ ) {
		#die "$1 $2 $3\n";
		push(@filtkeys,$1);
		push(@filtops,$2);
		push(@filtvals,$3);
	    }
	    else {
		push(@filtkeys,$F[2]);
		push(@filtops,"");
		push(@filtvals,"");
	    }
	}
	else {
	    push(@filtkeys,"");
	    push(@filtops,"");
	    push(@filtvals,"");
	}
    }

    for(my $i=0; $i < @vcfs; ++$i) {
	print STDERR "Reading $vcfs[$i]..\n";

	my %h = ();
	my $n = 0;
	my $m = 0;
	if ( $vcfs[$i] eq "-" ) {
	    open(IN,"-|") || die "Cannot open STDIN\n";
	}
	elsif ( $vcfs[$i] =~ /\.gz$/ ) {
	    open(IN,"zcat $vcfs[$i] |") || die "Cannot open gzipped file $vcfs[$i]\n";
	}
	else {
	    open(IN,$vcfs[$i]) || die "Cannot open file $vcfs[$i]\n";
	}

	while(<IN>) {
	    next if ( /^#/ );

	    print STDERR "Reading $. SNPs...\n" if ( $. % 100000 == 0 );

	    my ($chrom,$pos,$id,$ref,$alt,$qual,$filter,$info) = split(/[\t\r\n]/);

	    ## filter out SNP if needed
	    if ( $filtkeys[$i] ne "" ) {
		my $key = $filtkeys[$i];
		if ( $filtops[$i] eq "" ) {
		    if ( ( $filter =~ /$key/ ) || ( $info =~ /$key/ ) ) {}
		    else { next; }
		}
		else {
		    if ( $info =~ /$key=([^;]+)/ ) { 
			my $obs = $1; 
			my $op = $filtops[$i];
			my $val = $filtvals[$i];
			if ( $op eq "=" ) {
			    if ( $obs eq $val ) {}
			    else { next; }
			}
			elsif ( $op eq ">" ) {
			    #die "$key $obs $op $val\n";
			    if ( $obs > $val ) {}
			    else { next; }
			}
			elsif ( $op eq "<" ) {
			    if ( $obs < $val ) {}
			    else { next; }
			}
			else {
			    die "Cannot recognize operator $op\n";
			}
		    }
		    else {
			die "Cannot find $key in the INFO field $info\n";
		    }
		}
	    }

	    ## extract AC information
	    $info =~ s/AC1=/AC=/;
	    if ( $affield ) {
		if ( $info =~ /AN=(\d+)/ ) {
		    my $an = $1;
		    if ( $info =~ /$affield=([\d\.\,]+)/ ) {
			my @afs = split(/,/,$1);
			foreach my $af (@afs) {
			    if ( $af > 0 ) {
				my $ac = sprintf("%d",$af * $an);
				unless ( defined($h{$ac}) ) { $h{$ac} = 0; }
				++$h{$ac};
				unless ( defined($hACs{$ac}) ) { $hACs{$ac} = 0; }
				++$hACs{$ac};
				++$n;
			    }
			}
			++$m;
		    }
		    else {
			die "Cannot obtain $affield information from $info\n";
		    }
		}
		else {
		    die "Cannot obtain AN information from $info\n";
		}
	    }
	    else {
		if ( $info =~ /AC=([\d\,]+)/ ) {
		    my @acs = split(/,/,$1);
		    my $an = $1 if (( $adjAC > 0 ) && ( /AN=(\d+);/ ));
		    foreach my $ac (@acs) {
			if ( $ac > 0 ) {
			    #die $info if ( $an == 0 );
			    $ac = sprintf("%d",$ac * $adjAC / $an) if ( $adjAC > 0 );
			    unless ( defined($h{$ac}) ) { $h{$ac} = 0; }
			    ++$h{$ac};
			    unless ( defined($hACs{$ac}) ) { $hACs{$ac} = 0; }
			    ++$hACs{$ac};
			    ++$n;
			}
		    }
		    ++$m;
		}
		else {
		    die "Cannot obtain AC information from $info\n";
		}
	    }
	}
	close IN;
	push(@aACs,\%h);
	push(@nSNPs,$m);
	push(@nAlleles,$n);
    }

    #die join("\t",keys %hACs);

    my @sACs = sort {$a <=> $b} keys %hACs;
    my $denom = 0;
    for(my $i=0; $i < $sACs[$#sACs]; ++$i) {
	$denom += 1/($i+1);
    }

    $maxAC = $sACs[$#sACs] if ( $maxAC == 0 );

    open(DAT,">$out.dat") || die "Cannot open file $out.dat\n";
    for(my $i=0; $i < $maxAC; ++$i) {
	my $ac = $i+1;
	print DAT "$ac\t".sprintf("%.6lf",1/$ac/$denom);
	for(my $j=0; $j < @aACs; ++$j) {
	    if ( defined($aACs[$j]->{$ac}) ) {
		if ( $nofrac ) {
		    print DAT "\t".$aACs[$j]->{$ac}."\t".sprintf("%d",$aACs[$j]->{$ac});
		}
		else {
		    print DAT "\t".$aACs[$j]->{$ac}."\t".sprintf("%.6lf",$aACs[$j]->{$ac}/$nAlleles[$j])."";
		}
	    }
	    else {
		print DAT "\tNaN\tNaN";
	    }
	}
	print DAT "\n";
    }
    close DAT;
}

#my @colors = ("#167D19","#F71A1B","#C119BA","#28BEBE","#BCBE2C","#000000","#660000","#0000FF","#00FF00","#FF0000");
my @colors = ("#167D19","#F71A1B","#0000FF","#C119BA","#28BEBE","#BCBE2C","#000000","#660000","#00FF00","#FF0000");
my @pts = (8,4,6,7,1,2,3,5);

open(CMD,">$out.cmd") || die "Cannot open file\n";
print CMD "set terminal postscript eps enhanced dashed dashlength 1.0 linewidth 1.0 size 3.5,3 font 'Calibri,14' fontfile 'calibri.pfb' fontfile 'GillSansMT.pfb' fontfile 'GillSansItalic.pfb'\n";
print CMD "set out '$out.eps'\n";
print CMD "set title '$main' font 'GillSansMT,18'\n";
#print CMD "set xrange [1:100]\n";
#print CMD "set xrange [1:15]\n";
#print CMD "set yrange [0:0.45]\n";
print CMD "set grid x y mx my\n";
print CMD "set logscale xy\n";
#print CMD "set key below box width -8\n";
print CMD "set key below box samplen 1 width -2\n";
print CMD "set xtics nomirror (1,2,3,4,5,10,20,50,100,200,500,1000,2000,5000)out\n";
if ( $nofrac ) {
    print CMD "set ytics nomirror out\n";
}
else {
    print CMD "set ytics nomirror (1e-8, 2e-8, 5e-8, 1e-7, 2e-7, 5e-7, 1e-6, 2e-6, 5e-6, 1e-5, 2e-5, 5e-5, 1e-4, 2e-4, 5e-4, 0.001, 0.002, 0.005, 0.01, 0.02, 0.05, 0.1, 0.2, 0.5) out\n";
}
#print CMD "set xtics nomirror 0,1 out\n";
#print CMD "set ytics nomirror 0,0.05 out\n";
print CMD "set xlabel 'Non-reference allele count (AC)'\n";
if ( $nofrac ) {
    print CMD "set ylabel 'Number of variants'\n";
}
else {
    print CMD "set ylabel 'Fraction of variants'\n";
}
if ( $nofrac ) {
    print CMD "plot NaN with points notitle";
}
else {
    print CMD "plot '$out.dat' u 1:2 lc rgbcolor 'black' lt 1 lw 3 with lines title 'Neutral Expectation at Constant Population Size'";
}
for(my $i=0; $i < @titles; ++$i) {
    my $color = $colors[$i % ($#colors+1)];
    my $pt = $pts[$i % ($#pts+1)];
    #print CMD ", '$out.dat' u 1:".(2*$i+4)." lc rgbcolor '$color' lt 1 lw 2 pt $pt ps $ps with linespoints title '$titles[$i] ($nAlleles[$i] alleles, $nSNPs[$i] markers)'";
    print CMD ", '$out.dat' u 1:".(2*$i+4)." lc rgbcolor '$color' lt 1 lw 2 pt $pt ps $ps with linespoints title '$titles[$i] ($nSNPs[$i] markers)'";
}
print CMD "\n";
close CMD;

#my $setenv = "export GDFONTPATH=/net/fantasia/home/hmkang/lib/fonts/; export GNUPLOT_FONTPATH=/net/fantasia/home/hmkang/lib/fonts/";
my $epactsdir = $FindBin::Bin; #"/net/fantasia/home/hmkang/bin/epactsTest";
my $datadir = "$epactsdir/share/EPACTS";

my $setenv = "export GDFONTPATH=$datadir; export GNUPLOT_FONTPATH=$datadir; export GNUPLOT_PS_DIR=$datadir; export PATH=\$PATH:$epactsdir/bin/; export GNUPLOT_PFBTOPFA=\"$binpfbtops %s\"";

#my $cmd = "$setenv; $bingnuplot $outf.cmd";
    
my $cmd = "$setenv; $bingnuplot $out.cmd";
print "$cmd\n";
print `$cmd`;
    
$cmd = "$setenv; $binepstopdf $out.eps";
print "$cmd\n";
print `$cmd`;
